url="http://www.runoob.com"

# 各种符号的用法
#一 小括号
#1、单小括号 ()
# ①命令组。括号中的命令将会新开一个子shell顺序执行，所以括号中的变量不能够被脚本余下的部分使用。
# 用于初始化数组。如：array=(a b c d)
# 2、双小括号 (( ))
# 整数扩展。这种扩展计算是整数型的计算，不支持浮点型
# 单纯用 (( )) 也可重定义变量值，比如 a=5; ((a++)) 可将 $a 重定义为6
# 常用于算术运算比较，双括号中的变量可以不使用$符号前缀。括号内支持多个表达式用逗号分开。 


# 二、中括号，方括号[]
#  1、单中括号 []
# 1. bash 的内部命令，[和test是等同的。如果我们不用绝对路径指明，通常我们用的都是bash自带的命令。
# 2. Test和[]中可用的比较运算符只有==和!=，两者都是用于字符串比较的，不可用于整数比较，整数比较只能使用-eq，-gt这种形式。
# 3. 字符范围。用作正则表达式的一部分，描述一个匹配的字符范围。作为test用途的中括号内不能使用正则。
# 4. 在一个array 结构的上下文中，中括号用来引用数组中每个元素的编号。

#  2、双中括号[[ ]]
# 1. [[] ]] 结构比[ ]结构更加通用。在[[和]]之间所有的字符都不会发生文件名扩展或者单词分割，但是会发生参数扩展和命令替换。
# 2. 比如，&&、||、<和> 操作符能够正常存在于[[ ]]条件判断结构
# 3. bash把双中括号中的表达式看作一个单独的元素，并返回一个退出状态码。

# 三  大括号、花括号 {}
# 1. 扩展 {. .}自动补全 、{, , ,}
#  echo {1. .5}会将1，2，3，4，5都打印出来
#  touch class1_linux{1. .5}分别创建class1_linux1, class1_linux2, class1_linux3, class1_linux4, class1_linux5的5个文件。

# 2. {, , , }普通扩展
#  (1) 例如 $touch redhat.list redhat.list.bak redhat.list.link在复制时这两文件需要重复打很多内容，当有大括号时：
#  $cp /etc/apt/redhat.{list,list.bak,list.link} …shell在解释时会将后面参数自动扩展为两个,就成了和上面一样完整的命令。
#  (2) 删除包含奇数的文件： rm redhat{1,3,5}（rm redhat[135]）
#  (3) 同理，创建奇数文件： touch redhat{1,3,5}
#  

# 四、符号$后的括号
# (1) ${a} 变量a的值, 在不引起歧义的情况下可以省略大括号。
# (2) $(cmd) 命令替换，和`cmd`效果相同
# (3) $((expression)) 和`exprexpression`效果相同, 计算数学表达式exp的数值, 其中exp只要符合C语言的运算规则即可, 甚至三目运算符和逻辑表达式都可以计算。